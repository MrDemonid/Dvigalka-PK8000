DATAS: do;

$INCLUDE (:F0:GAME.LIT)

declare VERSION(*) byte data('Dvigalka (port) 1.0',0);

$INCLUDE(:F0:LEVELS.I80)
$INCLUDE(:F0:KEYB.EXT)

/*
  заставка и новые символы в знакогенератор
*/
declare
  title(*) byte public data(20h,1,9Bh,9Bh,20h,9Bh,9Bh,2,20h,9Bh,20h,9Bh,20h,9Bh,9Bh,
                            9Bh,20h,1,9Bh,9Bh,20h,1,9Bh,9Bh,20h,9Bh,20h,1,20h,1,9Bh,9Bh,
                            20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,20h,
                            20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,1,3,20h,9Bh,20h,9Bh,
                            20h,9Bh,20h,9Bh,20h,9Bh,9Bh,3,20h,9Bh,1,9Bh,20h,9Bh,20h,20h,
                            20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,3,20h,20h,9Bh,20h,9Bh,
                            20h,9Bh,20h,9Bh,20h,9Bh,9Bh,2,20h,9Bh,3,9Bh,20h,9Bh,20h,20h,
                            20h,9Bh,9Bh,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,2,20h,20h,9Bh,9Bh,9Bh,
                            9Eh,9Bh,9Bh,9Bh,9Dh,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,
                            20h,20h,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,20h,9Bh,4,2,20h,9Bh,20h,9Bh,
                            9Eh,9Dh,20h,9Eh,9Dh,9Bh,9Bh,3,20h,9Bh,20h,9Bh,20h,9Bh,20h,
                            20h,20h,9Bh,20h,9Bh,5,3,20h,9Bh,20h,9Bh,20h,4,20h,9Bh,20h,9Bh,20h,0),
  titCG(40) byte public data(1,3,7,0Fh,1Fh,3Fh,7Fh,0FFh,80h,0C0h,0E0h,0F0h,0F8h,0FCh,0FEh,0FFh,
                             0FFh,0FEh,0FCh,0F8h,0F0h,0E0h,0C0h,80h,0FFh,7Fh,3Fh,1Fh,0Fh,7,3,1,1,3,7,7,7,7,7,7);


/*
  надписи для справки
*/

declare
/*  dviga(*) byte public data (12,1,0E4h,0D7h,0C9h,0C7h,0C1h,0CCh,0CBh,0C1h,0), */
  urovent(*) byte public data (7,11,27,'F',11,4,0F7h,0D9h,0C2h,0C5h,0D2h,0C5h,0D4h,0C5h,
                               ' ',0D5h,0D2h,0CFh,0D7h,0C5h,0CEh,0D8h,20h,0),
  uroven(*) byte public data (20,1,27,'F',5,0,0F5h,0D2h,0CFh,0D7h,0C5h,0CEh,0D8h,': ',0),
  uk0(*) byte public data (0,20, 27,'F',10,0,'F1',27,'F',6,0,' ',0F3h,0D0h,0D2h,0C1h,0D7h,0CBh,0C1h,0),
  uk2(*) byte public data (0,21, 27,'F',10,0,'F3',27,'F',6,0,' ',0F3h,0CFh,0C8h,0D2h,0C1h,0CEh,0C9h,0D4h,0D8h,0),
  uk4(*) byte public data (0,22, 27,'F',10,0,'F5',27,'F',6,0,' ',0F0h,0D2h,0CFh,0C8h,0CFh,0D6h,0C4h,0C5h,0CEh,0C9h,0C5h,0),
  uk1(*) byte public data (16,20,27,'F',10,0,'F2 ',27,'F',6,0,' ',0EEh,0CFh,0D7h,0C1h,0D1h,20h,0C9h,0C7h,0D2h,0C1h,0),
  uk3(*) byte public data (16,21,27,'F',10,0,'F4 ',27,'F',6,0,' ',0F7h,0CFh,0D3h,0D3h,0D4h,0C1h,0CEh,0CFh,0D7h,0C9h,0D4h,
                           0D8h,0),
  uk5(*) byte public data (16,22,27,'F',10,0,0F0h,0F2h,00E6h,27,'F',6,0,' ',0F7h,0D9h,0CAh,0D4h,0C9h,0);



/*
  спрайты объектов

    Формат спрайта:
    --------------
    8 байт - битовый образ 8x8
    8 байт - цвет фона и пикселей для каждой строки образа
*/

declare
  bmpNull(16)    byte public data (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
  bmpWall(16)    byte data (0DFh,0DFh,0DFh,0,0FDh,0FDh,0FDh,0,3,2,2,0,3,2,2,0),
  bmpKey(16)     byte data (0,0,040h,0A0h,0BFh,0A6h,040h,0,10,11,11,11,11,11,11,11),
  bmpBarrier(16) byte data (010h,054h,038h,0EEh,038h,054h,010h,0,7,6,6,7,6,6,7,0),
  bmpBeam(16)    byte data (0FFh,081h,0A5h,081h,081h,0A5h,081h,0FFh,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h,0E8h),
  bmpBridg(16)   byte data (0FFh,066h,0FFh,0AAh,0,0,0,0,0Ah,0Ah,0Ah,0Bh,0,0,0,0),
  bmpSwitch(16)  byte data (0E0h,0ECh,0F2h,01Ah,04Ah,042h,03Ch,0,0Ch,0Ch,0Ch,0Ch,0Ch,0Ch,0Ch,0Ch),
  bmpExit(16)    byte data (03Ch,07Eh,0E7h,0C3h,0C3h,0C3h,0C3h,0C3h,08h,08h,58h,58h,58h,58h,58h,58h);

declare
  bmpStone(16)   byte data (3Ch,66h,0DFh,0BFh,0BFh,0FFh,07Eh,3Ch,5,5,5,5,5,5,5,5),
  bmpStone2(16)  byte data (3Ch,66h,0FBh,0FDh,0FDh,0FFh,07Eh,3Ch,5,5,5,5,5,5,5,5),
  bmpStone3(16)  byte data (3Ch,07Eh,0FFh,0FDh,0FDh,0FBh,66h,3Ch,5,5,5,5,5,5,5,5),
  bmpStone4(16)  byte data (3Ch,07Eh,0FFh,0BFh,0BFh,0DFh,66h,3Ch,5,5,5,5,5,5,5,5),

  tblStoneImg(4) address public data (.bmpStone,.bmpStone2,.bmpStone3,.bmpStone4);

declare
  bmpHeroL(16)  byte public data (0,1Ch,2Eh,7Eh,1Ch,8,8,18h,    0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),
  bmpHeroL2(16)  byte data (0,38h,5Ch,0FCh,38h,28h,0C4h,0Ch,    0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),
  bmpHeroL3(16)  byte data (0,0Eh,17h,3Fh,0Eh,5,0Ah,18h,        0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),
  bmpHeroR(16)  byte public data (0,38h,74h,7Eh,38h,10h,10h,18h,0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),
  bmpHeroR2(16)  byte data (0,1Ch,3Ah,3Fh,1Ch,14h,23h,30h,      0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),
  bmpHeroR3(16)  byte data (0,70h,0E8h,0FCh,70h,0A0h,50h,18h,   0,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh,0Fh),

  tblHeroImg(6)  address public data(.bmpHeroL2,.bmpHeroL3,.bmpHeroL,.bmpHeroR2,.bmpHeroR3,.bmpHeroR);

declare
  bmpFire1(16)   byte data (0,1,20h,4,6Ah,3Ch,76h,0A5h,9h,9h,9h,9h,9h,9h,0B9h,0B9h),
  bmpFire2(16)   byte data (0,20h,4,92h,5Ah,75h,0A9h,52h,9h,9h,9h,9h,9h,9h,0B9h,0B9h),
  bmpFire3(16)   byte data (22h,98h,16h,0AEh,67h,0D3h,0A2h,81h,9h,9h,9h,9h,9h,0B9h,0B9h,0B9h),

  tblFireImg(4)  address public data(.bmpFire1,.bmpFire2,.bmpFire3,.bmpFire2);

declare
  bmpLift1(16)   byte data (7Eh,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,7Eh,8,6,6,7,6,6,7,8),
  bmpLift2(16)   byte data (7Eh,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,7Eh,8,6,7,6,6,7,6,8),
  bmpLift3(16)   byte data (7Eh,3Ch,3Ch,3Ch,3Ch,3Ch,3Ch,7Eh,8,7,6,6,7,6,6,8),

  tblLiftImg(3)  address public data(.bmpLift1,.bmpLift2,.bmpLift3);



/* null,стена,ключ,телепорт,мешалка,бревно,камень,дорожка,hero,вырезалка,огонь,выход? */
declare
  tblSprites(12) address public data (.bmpNull,.bmpWall,.bmpKey,.bmpLift1,.bmpBarrier,.bmpBeam,
                                      .bmpStone,.bmpBridg,.bmpHeroL,.bmpSwitch,.bmpFire1,.bmpExit);

/*
  сгорающее бревно
*/
declare
  bmpFireBeam1(16) byte data(89h,52h,85h,0B2h,49h,0F7h,4Ah,2Ch,9,9,9,9,9,9,0B9h,0B9h),
  bmpFireBeam2(16) byte data(52h,4,0A2h,9,0A4h,4Ah,2Ch,0,9,9,9,9,9,9,9,9),
  bmpFireBeam3(16) byte data(4,80h,9,40h,2,24h,0,0,9,8,8,9,8,9,0,0),
  bmpFireBeam4(16) byte data(0,12h,20h,8,2,0,0,0,0,8,8,8,8,0,0,0),

  bmpFireBeamImg(4) address public data(.bmpFireBeam1,.bmpFireBeam2,.bmpFireBeam3,.bmpFireBeam4);


/*
  переменные для игры
*/
declare
  curStage byte public,    /* текущий уровень */
  fGameType byte public,   /* тип игры: 0 - обычная, 1 - демо-режим */
  fStop byte public;       /* флаг прерывания стадии */


declare pole(300) byte public;
declare spole(300) byte public;




/*
------------------------------------------------------------------------------
  Анимация
------------------------------------------------------------------------------
*/

declare tblAnim(16) ANIM public;





/*
------------------------------------------------------------------------------
  Музыка
------------------------------------------------------------------------------
*/
declare
  musList address public,  /* список музонов */
  ioBuffer address public, /* буфер под загрузку музонов */
  ioBufLen byte public,    /* размер буфера в секторах */
  curMusic address public, /* текущий музон */
  nMusic byte public;      /* количество найденных музонов */


/* клавиши перемещения игрока */
declare
  mKeys(*) byte public data(KEY$LEFT, KEY$UP, KEY$DOWN, KEY$RIGHT);

end;




